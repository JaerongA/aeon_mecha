version: 'v0.0.0'
LabBook: null
SciViz:
  auth:
    mode: database
  pages:
    Subjects:
      route: /animals
      grids:
        grid2:
          type: fixed
          columns: 1
          row_height: 700
          components:
            Animals:
              route: /query1
              x: 0
              y: 0
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    acquisition = aeon_acquisition
                    subject_session_count = acquisition.Experiment.Subject.aggr(acquisition.SessionEnd.join(acquisition.Session, left=True), ..., session_count='count(session_start)')
                    subject_latest_session = acquisition.Experiment.Subject.aggr(acquisition.Session, session_start='max(session_start)').join(acquisition.SessionEnd, left=True)
                    return {'query': subject_session_count * subject_latest_session, 'fetch_args': []}
    Sessions:
      route: /sessions
      grids:
        grid3:
          type: fixed
          columns: 1
          row_height: 700
          components:
            Sessions:
              route: /query2
              x: 0
              y: 0
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    query = aeon_acquisition.Session.join(aeon_acquisition.SessionEnd, left=True).proj('session_end', session_duration='IFNULL(session_duration, -1)')
                    return {'query': query, 'fetch_args': []}

    SessionSummary:
      route: /sessions_summary
      grids:
        grid3:
          type: fixed
          columns: 1
          row_height: 700
          components:
            Sessions Summary:
              route: /query3
              x: 0
              y: 0
              height: 1
              width: 1
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_analysis):
                    query = aeon_analysis.SessionSummary
                    return {'query': query, 'fetch_args': []}

    SubjectRewardRate:
      route: /subject_reward_rate
      grids:
        reward_rate_difference:
          route: /reward_rate_difference
          type: dynamic
          columns: 3
          row_height: 600
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(u_thinh_analysis):
                analysis = u_thinh_analysis
                return {'query': analysis.SubjectRewardRateDifference.proj(), 'fetch_args': []}
          component_templates:
            comp1:
              route: /myMeta
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    return dict(query=aeon_acquisition.Experiment.Subject(), fetch_args=[])
            comp2:
              route: /reward_diff_plot
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(u_thinh_analysis):
                    analysis = u_thinh_analysis
                    return {'query': analysis.SubjectRewardRateDifference(), 'fetch_args': ['reward_rate_difference_plotly']}
