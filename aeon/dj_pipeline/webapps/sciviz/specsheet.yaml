version: "v0.1.0"
LabBook: null
SciViz:
  auth: True
  component_interface:
    override: |
      from datetime import datetime
      from pharus.component_interface import SlideshowComponent, NumpyEncoder, type_map
      from flask import request
      from aeon.dj_pipeline.utils.video import retrieve_video_frames

      class AeonSlideshowComponent(SlideshowComponent):
          def dj_query_route(self):
              fetch_metadata = self.fetch_metadata

              # Dj query provided should return only a video location
              fetched_args = (fetch_metadata["query"] & self.restriction).fetch1(
                  *fetch_metadata["fetch_args"]
              )
              kwargs = {**fetched_args, **request.args}
              kwargs['camera_name'] = kwargs.pop('camera_description')
              kwargs['start_time'] = datetime.utcfromtimestamp(int(kwargs.pop('startTime')))
              kwargs['end_time'] = datetime.utcfromtimestamp(int(kwargs.pop('endTime')))
              kwargs['start_frame'] = int(kwargs.pop('start_frame'))
              kwargs['chunk_size'] = int(kwargs.pop('chunk_size'))
                
              return (
                  NumpyEncoder.dumps(
                      retrieve_video_frames(**kwargs)
                  ),
                  200,
                  {"Content-Type": "application/json"},
              )

      type_map = dict({"slideshow:aeon": AeonSlideshowComponent}, **type_map)

  pages:
    Colony:
      route: /colony_entry
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 1000
          components:
            Colony Entry:
              route: /colony_form
              x: 0
              y: 0
              height: 0.5
              width: 1
              type: form
              tables:
                - aeon_lab.Colony
              map:
                - type: attribute
                  input: Subject
                  destination: subject
                - type: attribute
                  input: Reference Weight
                  destination: reference_weight
                - type: attribute
                  input: Sex
                  destination: sex
                - type: attribute
                  input: Date of Birth
                  destination: subject_birth_date
                - type: attribute
                  input: Note
                  destination: note

    Subjects:
      route: /subjects
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 700
          components:
            Animals:
              route: /allsubjects
              link: /per_subject_report
              x: 0
              y: 0
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition, aeon_analysis):
                    acquisition = aeon_acquisition
                    visit_analysis = aeon_analysis
                    query = acquisition.Experiment.Subject.aggr(visit_analysis.VisitEnd.join(visit_analysis.Visit, left=True), first_visit_start='MIN(visit_start)', last_visit_end='MAX(visit_end)', total_visit_count='COUNT(visit_start)', total_visit_duration='SUM(visit_duration)')
                    query = query.proj("first_visit_start", "last_visit_end", "total_visit_count", total_visit_duration="CAST(total_visit_duration AS DOUBLE(10, 3))")
                    return {'query': query, 'fetch_args': {'order_by': 'last_visit_end DESC'}}

    VisitSummary:
      route: /visit_summary
      grids:
        grid3:
          type: fixed
          columns: 1
          row_height: 700
          components:
            VisitSummary:
              route: /visit_summary_grid3_1
              link: /per_visit_report
              x: 0
              y: 0
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_analysis):
                    query = aeon_analysis.Visit.aggr(aeon_analysis.VisitSummary, ..., duration="SUM(day_duration)", total_distance_travelled="SUM(total_distance_travelled)", total_pellet_count="SUM(total_pellet_count)", total_wheel_distance_travelled="SUM(total_wheel_distance_travelled)", keep_all_rows=True)
                    query = query.join(aeon_analysis.VisitEnd, left=True)
                    query = query.proj("visit_end", total_pellet_count="CAST(total_pellet_count AS DOUBLE)", duration="CAST(duration AS DOUBLE(10, 3))", total_distance_travelled="CAST(total_distance_travelled AS DOUBLE(10, 3))", total_wheel_distance_travelled="CAST(total_wheel_distance_travelled AS DOUBLE(10, 3))")
                    return {'query': query, 'fetch_args': {'order_by': 'visit_end DESC'}}

    ExperimentReport:
      route: /experiment_report
      grids:
        experiment_report:
          route: /experiment_report
          type: dynamic
          columns: 1
          row_height: 1000
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(aeon_acquisition):
                acquisition = aeon_acquisition
                return {'query': aeon_acquisition.Experiment(), 'fetch_args': []}
          component_templates:
            comp3:
              route: /avg_time_distribution
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.ExperimentTimeDistribution(), 'fetch_args': ['time_distribution_plotly']}

    SubjectReport:
      route: /subject_report
      grids:
        subject_report:
          route: /subject_report
          type: dynamic
          columns: 2
          row_height: 1000
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(aeon_acquisition):
                acquisition = aeon_acquisition
                return {'query': aeon_acquisition.Experiment.Subject & {'experiment_name': 'exp0.1-r0'}, 'fetch_args': []}
          component_templates:
            comp1:
              route: /subject_meta
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    return dict(query=aeon_acquisition.Experiment.Subject(), fetch_args=[])
            comp2:
              route: /reward_diff_plot
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.SubjectRewardRateDifference(), 'fetch_args': ['reward_rate_difference_plotly']}
            comp3:
              route: /wheel_distance_travelled
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.SubjectWheelTravelledDistance(), 'fetch_args': ['wheel_travelled_distance_plotly']}

    PerSubjectReport:
      hidden: true
      route: /per_subject_report
      grids:
        per_subject_report:
          type: fixed
          route: /per_subject_report
          columns: 1
          row_height: 400
          components:
            comp1:
              route: /per_subject_meta
              x: 0
              y: 0
              height: 1
              width: 1
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    return dict(query=aeon_acquisition.Experiment.Subject(), fetch_args=[])
            comp2:
              route: /per_subject_reward_diff_plot
              x: 0
              y: 1
              height: 1
              width: 1
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.SubjectRewardRateDifference(), 'fetch_args': ['reward_rate_difference_plotly']}
            comp3:
              route: /per_subject_wheel_distance_travelled
              x: 0
              y: 2
              height: 1
              width: 1
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.SubjectWheelTravelledDistance(), 'fetch_args': ['wheel_travelled_distance_plotly']}

    PerVisitReport:
      hidden: true
      route: /per_visit_report
      grids:
        per_visit_report:
          type: fixed
          route: /per_visit_report
          columns: 1
          row_height: 400
          components:
            comp1:
              route: /per_visit_meta
              x: 0
              y: 0
              height: 1
              width: 1
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_analysis):
                    query = aeon_analysis.Visit.aggr(aeon_analysis.VisitSummary, ..., duration="SUM(day_duration)", total_distance_travelled="SUM(total_distance_travelled)", total_pellet_count="SUM(total_pellet_count)", total_wheel_distance_travelled="SUM(total_wheel_distance_travelled)", keep_all_rows=True)
                    query = query.join(aeon_analysis.VisitEnd, left=True)
                    query = query.proj("visit_end", total_pellet_count="CAST(total_pellet_count AS DOUBLE)", duration="CAST(duration AS DOUBLE(10, 3))", total_distance_travelled="CAST(total_distance_travelled AS DOUBLE(10, 3))", total_wheel_distance_travelled="CAST(total_wheel_distance_travelled AS DOUBLE(10, 3))")
                    return {'query': query, 'fetch_args': []}
            comp2:
              route: /per_visit_summary_plot
              x: 0
              y: 1
              height: 1
              width: 1
              type: file:image:attach
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    report = aeon_report
                    return {'query': report.VisitDailySummaryPlot(), 'fetch_args': ['summary_plot_png']}

    Visits247:
      route: /visits247
      grids:
        visit_daily_summary:
          route: /visit_daily_summary_grid1
          type: dynamic
          columns: 1
          row_height: 4000
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(aeon_report):
                return {'query': aeon_report.VisitDailySummaryPlot.proj(), 'fetch_args': []}
          component_templates:
            comp1:
              route: /visit_daily_summary_pellet_count
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['pellet_count_plotly'])
            comp2:
              route: /visit_daily_summary_wheel_distance_travelled
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['wheel_distance_travelled_plotly'])
            comp3:
              route: /visit_daily_summary_total_distance_travelled
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['total_distance_travelled_plotly'])
            comp4:
              route: /visit_daily_summary_weight_patch
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['weight_patch_plotly'])
            comp5:
              route: /visit_daily_summary_foraging_bouts
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['foraging_bouts_plotly'])
            comp6:
              route: /visit_daily_summary_foraging_bouts_pellet_count
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['foraging_bouts_pellet_count_plotly'])
            comp7:
              route: /visit_daily_summary_foraging_bouts_duration
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['foraging_bouts_duration_plotly'])
            comp8:
              route: /visit_daily_summary_region_time_fraction_daily
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['region_time_fraction_daily_plotly'])
            comp9:
              route: /visit_daily_summary_region_time_fraction_hourly
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_report):
                    return dict(query=aeon_report.VisitDailySummaryPlot(), fetch_args=['region_time_fraction_hourly_plotly'])

    VideoStream:
      route: /videostream
      grids:
        grid1:
          type: fixed
          columns: 3
          row_height: 100
          components:
            experiment_dropdown:
              x: 0
              y: 0
              height: 1
              width: 1
              type: dropdown-query
              channel: stream_experiment_selector
              route: /videostream_experiment_dropdown
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    acquisition = aeon_acquisition
                    return {'query': aeon_acquisition.Experiment(), 'fetch_args': ['experiment_name']}
            camera_dropdown:
              x: 0
              y: 1
              height: 1
              width: 1
              route: /videostream_camera_dropdown
              type: dropdown-query
              channel: stream_camera_selector
              channels: [stream_experiment_selector]
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    q = aeon_acquisition.ExperimentCamera.proj('camera_description')
                    return {'query': q, 'fetch_args': ['camera_description']}
            time_range_selector:
              x: 0
              y: 2
              height: 1
              width: 1
              type: daterangepicker
              channel: stream_time_selector
            video_streamer:
              x: 1
              y: 0
              height: 5
              width: 2
              type: slideshow:aeon
              route: /videostream_video_streamer
              batch_size: 3
              chunk_size: 50
              buffer_size: 30
              max_FPS: 50
              channels:
                [
                  stream_experiment_selector,
                  stream_camera_selector,
                  stream_time_selector,
                ]
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_acquisition):
                    q = aeon_acquisition.ExperimentCamera
                    return {'query': q, 'fetch_args': []}
    PipelineMonitor:
      route: /pipeline_monitor
      grids:
        grid1:
          type: fixed
          columns: 1
          row_height: 680
          components:
            Worker Status:
              route: /pipeline_monitor_workerstatus
              x: 0
              y: 0
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_workerlog):
                    cls = aeon_workerlog.WorkerLog
                    backtrack_minutes = 60
                    recent = (
                        cls.proj(
                            minute_elapsed="TIMESTAMPDIFF(MINUTE, process_timestamp, UTC_TIMESTAMP())"
                        )
                        & f"minute_elapsed < {backtrack_minutes}"
                    )
                    recent_jobs = dj.U("process").aggr(
                        cls & recent,
                        worker_count="count(DISTINCT pid)",
                        minutes_since_oldest="TIMESTAMPDIFF(MINUTE, MIN(process_timestamp), UTC_TIMESTAMP())",
                        minutes_since_newest="TIMESTAMPDIFF(MINUTE, MAX(process_timestamp), UTC_TIMESTAMP())",
                    )
                    
                    return {'query': recent_jobs, 'fetch_args': {'order_by': 'minutes_since_newest ASC'}}
            Error Log:
              route: /pipeline_monitor_errorlog
              x: 0
              y: 1
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_workerlog):
                    cls = aeon_workerlog.ErrorLog.proj(..., '-error_timestamp', minutes_elapsed='TIMESTAMPDIFF(MINUTE, error_timestamp, UTC_TIMESTAMP())')
                    return {'query': cls, 'fetch_args': {'order_by': 'minutes_elapsed ASC'}}
            Jobs Log:
              route: /pipeline_monitor_jobslog
              x: 0
              y: 2
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_workerlog):
                    workerlog_vm = aeon_workerlog
                    db_prefix = workerlog_vm.schema.database.replace('workerlog', '')
                    connection = dj.conn(
                        host=workerlog_vm.schema.connection.conn_info['host'],
                        user=workerlog_vm.schema.connection.conn_info['user'],
                        password=workerlog_vm.schema.connection.conn_info['passwd'],
                        reset=True)
                    schema_names = [s for s in dj.list_schemas(connection=connection) if s.startswith(db_prefix)]
                    jobs_table = None
                    print(schema_names, flush=True)
                    for schema_name in schema_names:
                        vm = dj.VirtualModule(schema_name, schema_name, connection=connection)
                        jobs_query = dj.U(*vm.schema.jobs.heading.names) & vm.schema.jobs
                        if jobs_table is None:
                            jobs_table = jobs_query
                        else:
                            jobs_table += jobs_query
                    jobs_table = jobs_table.proj(..., minutes_elapsed='TIMESTAMPDIFF(MINUTE, timestamp, UTC_TIMESTAMP())')
                    return {'query': jobs_table, 'fetch_args': {'order_by': 'status DESC, minutes_elapsed ASC'}}
            Worker Log:
              route: /pipeline_monitor_workerlog
              x: 0
              y: 3
              height: 1
              width: 1
              type: antd-table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(aeon_workerlog):
                      cls = aeon_workerlog.WorkerLog.proj(..., minutes_elapsed='TIMESTAMPDIFF(MINUTE, process_timestamp, UTC_TIMESTAMP())')
                      return {'query': cls, 'fetch_args': {'order_by': 'minutes_elapsed ASC'}}

    DataEntry:
      route: /data_entry
      grids:
        grid5:
          type: fixed
          columns: 1
          row_height: 1000
          components:
            Lab Entry:
              route: /lab_form
              x: 0
              y: 0
              height: 0.4
              width: 1
              type: form
              tables:
                - aeon_lab.Arena
              map:
                - type: attribute
                  input: Arena Name
                  destination: arena_name
                - type: table
                  input: Arena Shape
                  destination: aeon_lab.ArenaShape
                - type: attribute
                  input: X Dimension
                  destination: arena_x_dim
                - type: attribute
                  input: Y Dimension
                  destination: arena_y_dim
                - type: attribute
                  input: Z Dimension
                  destination: arena_z_dim
                - type: attribute
                  input: Arena Description
                  destination: arena_description

            Subject Entry:
              route: /subject_form
              x: 0
              y: 0.4
              height: 0.3
              width: 1
              type: form
              tables:
                - aeon_subject.Subject
              map:
                - type: attribute
                  input: Subject ID
                  destination: subject
                - type: attribute
                  input: Sex
                  destination: sex
                - type: attribute
                  input: Date of Birth
                  destination: subject_birth_date
                - type: attribute
                  input: Subject Description
                  destination: subject_description

            Experiment Entry:
              route: /exp_form
              x: 0
              y: 0.7
              height: 0.4
              width: 1
              type: form
              tables:
                - aeon_acquisition.Experiment
              map:
                - type: attribute
                  input: Experiment ID
                  destination: experiment_name
                - type: attribute
                  input: Start Time
                  destination: experiment_start_time
                - type: attribute
                  input: Description
                  destination: experiment_description
                - type: table
                  input: Lab Arena
                  destination: aeon_lab.Arena
                - type: table
                  input: Lab Location
                  destination: aeon_lab.Location
