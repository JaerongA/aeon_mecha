#! /bin/bash --login

err_exit() {
	echo "#! Error: $*"
	exit 1
}

# get this script file and its parent directory name (no symlink resolution)
script_cmd="${BASH_SOURCE[0]}"
script_path="$(cd "$(dirname ${script_cmd})" &>/dev/null && pwd)"
script_file=$(basename "${script_cmd}")
shell_dir=$PWD

# globals
# -------

[[ -z "${SUDO_USER}" ]] && _IS_SUDO=0 || _IS_SUDO=1
SHOW_HELP=0
CR_PAT=${CR_PAT:-""}
_OPS="up"
COMPOSE_ARGS=()
OPS_ARGS=()
PROJECT_NAME="aeon_mecha"

cmd_help="$(test $_IS_SUDO -eq 1 && echo 'sudo') $script_path/$script_file"

show_help() {
	echo "usage: $cmd_help [COMPOSE_ARGS]... up/down/exec [OPS_ARGS]...

Helper to run docker-compose as sudo w/ a private container.


help, --help, -h ... Show this help then exit.
-p ................. Set the project name for the container.
-pat, --pat=VAL .... Set the personal access token to download the image.


Environment Variables:

  _IS_SUDO=$_IS_SUDO


Examples:

 run docker-compose up
   > $script_file up
   > $script_file -f docker/image/docker-compose-dev.yml up

 run docker-compose down
   > $script_file down
   > $script_file -f docker/image/docker-compose-dev.yml down --volumes

 Execute a command from a running service
   > $script_file exec high bash

"
	exit 0
}

while [[ $# -gt 0 ]]; do
	case "$1" in
	"help" | "--help" | "-h")
		SHOW_HELP=1
		break
		;;
	"-p" | "--project-name")
		PROJECT_NAME=$2
		shift
		shift
		;;
	"-pat")
		CR_PAT=$2
		shift
		shift
		;;
	--pat=*)
		CR_PAT="${1#*=}"
		shift
		;;
	"exec")
		_OPS="$1"
		shift
		OPS_ARGS+=("-it")
		for arg in "$@"; do
			case "$1" in
			high | mid)
				export DCID=$(docker ps -aqf name="ingest_$1")
				OPS_ARGS+=("$DCID")
				shift
				break
				;;
			esac
		done
		OPS_ARGS+=("$@")
		break
		;;
	"up")
		_OPS="$1"
		shift
		OPS_ARGS+=(--detach --remove-orphans)
		OPS_ARGS+=("$@")
		break
		;;
	"down")
		_OPS="$1"
		shift
		OPS_ARGS+=("$@")
		break
		;;
	*)
		COMPOSE_ARGS+=("$1")
		shift
		;;
	esac
done

# show help if asked
# ------------------

[[ ${SHOW_HELP} -eq 1 ]] && show_help

if [[ ${_IS_SUDO} -eq 1 ]]; then
	"> Running as sudo"
fi

COMPOSE_ARGS+=(--project-name "${PROJECT_NAME}" --verbose)

ghcr_login() {
	echo ">>> Logging into gchr w/ token."
	if [[ -z "${CR_PAT}" ]]; then
		if [[ -f ".env" ]]; then
			source .env
			CR_PAT=${CR_PAT:-""}
		fi
	fi
	[[ -z "${CR_PAT}" ]] && echo "No personal access token CR_PAT will be used" ||
		echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin
}

compose_up() {
	echo ">> Running docker-compose up."
	ghcr_login
	docker-compose "${COMPOSE_ARGS[@]}" up "${OPS_ARGS[@]}"
}

compose_down() {
	echo ">> Running: docker-compose "${COMPOSE_ARGS[@]}" down "${OPS_ARGS[@]}""
	docker-compose "${COMPOSE_ARGS[@]}" down "${OPS_ARGS[@]}"
}

docker_exec() {
	echo ">> Running docker exec."
	docker exec "${OPS_ARGS[@]}"
}

case "$_OPS" in
"up")
	compose_up
	;;
"down")
	compose_down
	;;
"exec")
	docker_exec
	;;
esac
